/* -*- mode: c++ -*- */

#include <time.h>
#include <sys/time.h>
#include <sys/timeb.h>
#include "usbfunctions.h"
#include "Word.h"
#include "Event.h"
#include "Packet.h"
#include "Level.h"
#include <algorithm>
#include <special_functions_usb.h>
#include <stdio.h>
#include <algorithm>
#include <ios>
#include <pqxx/pqxx>

using namespace std;

#define STORE_RAW false
static const int MAX_CHANNELS_NUMBER=32;

unsigned int MAX_TIME = 10000;
string board_address;
string board_name;

vector<size_t> expected_channels;
vector<size_t> expected_channels_x1;
vector<size_t> expected_channels_y1;
vector<size_t> expected_channels_x2;
vector<size_t> expected_channels_y2;
vector<size_t> expected_channels_x3;
vector<size_t> expected_channels_y3;
vector<size_t> expected_channels_x4;
vector<size_t> expected_channels_y4;
vector<size_t> expected_channels_x5;
vector<size_t> expected_channels_y5;
vector<size_t> expected_channels_x6;
vector<size_t> expected_channels_y6;
vector<size_t> expected_channels_x7;
vector<size_t> expected_channels_y7;
vector<size_t> expected_channels_x8;
vector<size_t> expected_channels_y8;

void read_detector(string filename);
size_t count_layers_of_event(Event e, bool print);

string get_file_number(size_t i);
string int_to_string(size_t i);
string double_to_string(double i);

pqxx::result execute_transaction(string sql, bool print);
pqxx::result execute_nontransaction(string sql, bool print);
void execute_insert(std::string binary) ;
bool check_if_table_exists( std::string table_name );


pqxx::connection * c;


void fill_channel_names();
string channel_names[MAX_CHANNELS_NUMBER];
string list_of_channel_names(size_t n);
string list_of_channel_names_and_types;

int getMilliCount();

int getMilliSpan(int nTimeStart);

int main(int argc, char *argv[]){

  if( argc <= 2 ){
    clog << " please provide device number and running time (ms) " << endl;
    exit(0);
  }
  string devicename=argv[1];
  MAX_TIME=atoi(argv[2]);

  // load detector shape
  read_detector("detector.inp");

  // initialize parameters
  unsigned int timeout = (unsigned int)read_parameter_from_file("params.inp","timeout");
  size_t n_layers_per_board = (size_t)(read_parameter_from_file("params.inp","n_layers_per_board")+0.5);
  bool print = (bool)(read_parameter_from_file("params.inp","print"));
  // print verbosity
  board_address = read_address_from_file("data_params.txt",devicename);
  board_name="board_" + board_address;
  string string_dbname = read_string_from_file("params.inp","dbname");
  string string_host = read_string_from_file("params.inp","host");
  string string_user = read_string_from_file("params.inp","user");
  string string_password = read_string_from_file("params.inp","password");

  std::clog << " connection parameters for device: " << devicename << std::endl;
  std::clog << " timeout " << timeout << std::endl;
  std::clog << " n_layers_per_board " << n_layers_per_board << std::endl;
  std::clog << " print " << print << std::endl;
  std::clog << " time " << MAX_TIME << " ms " << std::endl; 
  std::clog << " STORE_RAW " << STORE_RAW << std::endl;fflush(stdout);


  string string_connection = "user=" + string_user + " host=" + string_host + " password=" + string_password + " dbname=" + string_dbname;
  c = new pqxx::connection(string_connection.c_str());

  if( !c->is_open() ){
    std::clog << " the connection to database is not open; quit " << std::endl;
    exit(0);
  }
  std::clog << " the connection to database " << c->dbname() << " is open " << std::endl;


  int modulo = 100;
  size_t n_layers;
  bool selected;

  // read all usb devices and get cypress ones
  static vector<libusb_device_handle*> handles;
  handles = retrieve_usb_devices();
  if( handles.size() == 0 ){
    clog << " problem: no usb devices " << endl;
    exit(0);
  }

  // read one packet from each board and find board with chosen address
  bool found = false;
  size_t index_of_board_with_good_address;
  static libusb_device_handle* handle;
  for(size_t i=0; i<handles.size(); i++){
    Packet local_packet;
    bool this_ok = read_packet_from_board(handles[i], timeout, &local_packet);
    if( !this_ok ) break;
    if( local_packet.board_address() == board_address ){
      found = true;
      handle = handles[i];
      index_of_board_with_good_address = i;
      break;
    }
  }
  if( !found ){
    clog << " cannot find board with address " << board_address << " quitting " << endl;
    exit(0);
  }

  for(vector<libusb_device_handle*>::iterator ih = handles.begin(); ih!=handles.end(); ++ih){
    if( ih - handles.begin() != index_of_board_with_good_address ){
      libusb_release_interface(*ih,0);
      libusb_close(*ih);
    }
  }

  clog << " freed devices for board " << board_address << endl; fflush(stdout);


  std::string command;
  pqxx::result the_db_entry;


  // check if board table exists
  if( check_if_table_exists( board_name ) ){

    // count rows in board table
    command = "SELECT COUNT(*) FROM " + board_name ; the_db_entry = execute_nontransaction(command, false);
    std::clog << " goind to delete table " << board_name << " with " << the_db_entry[0][0].as<int>() << " entries " << std::endl; fflush(stdout);
    
    // delete board table from database
    command = "DROP TABLE " + board_name; execute_nontransaction(command, false);
  }

  // create board table in database
#if STORE_RAW

  command = "CREATE TABLE " + board_name + " ("			\
    "db_entry    int  NOT NULL PRIMARY KEY,"						\
    "time             decimal,"						\
    "word    char(4096) );"; // create table

#else

  //command = " DECLARE ListOfChannels TABLE(ListOfChannels VARCHAR(256));"; execute_nontransaction(command, true);
  //command = ""; execute_nontransaction(command, true);
  //command = ""; execute_nontransaction(command, true);
  //command = ""; execute_nontransaction(command, true);

  fill_channel_names();

  command = "CREATE TABLE " + board_name + " ("			\
    "db_entry    int  NOT NULL PRIMARY KEY,"						\
    "packet_number    int,"						\
    "board_address    CHAR(6),"					\
    "time             decimal,"						\
    "n_layers             int,"						\
    "nchs             int,"
    + list_of_channel_names_and_types
    + ");"; // create table

#endif

  execute_nontransaction(command, false);


  //execute_nontransaction("select * from master.dbo.sysdatabases"); // list all databases
  //execute_nontransaction("SELECT Distinct TABLE_NAME FROM information_schema.TABLES where TABLE_TYPE = 'BASE TABLE'"); // list all tables

  clog << " will collect " << MAX_TIME << " ms, timeout = " << timeout << ", n of boards: " << handles.size() << " from board " << board_address << endl; fflush(stdout);


  // collect and write events
  size_t ip = 0;
  size_t db_entry = 0;
  string string_packet_number;
  string string_board_address;
  string string_time;
  string string_nchs;
  string string_chs;
  string string_n_layers;
  bool first_modulo = true;
  double percentage;
  bool good_modulo;

  int time_start = getMilliCount();
  int time_elapsed = 0;

  while( time_elapsed < MAX_TIME ){
    time_elapsed = getMilliSpan(time_start);
    ip++;

    //std::clog << " receiver reading packet " << ip << " of " << MAX_TIME << " for board " << board_address << std::endl;

    Packet local_packet;
    bool this_ok = read_raw_packet_from_board(handle, timeout, &local_packet);
    if( !this_ok ) {
      std::clog << " receiver, packet " << ip << " is not ok, break " << std::endl;
      break;
    }

    percentage = (double)time_elapsed/(double)MAX_TIME*100.;
    good_modulo = ((int)(percentage) % 20 == 0);


#if STORE_RAW

    local_packet.packet_to_physical_parameters();
    string_time = double_to_string(local_packet.events().begin()->time("s"));

    // insert packet into table
    command = "insert into " + board_name + " (db_entry, time, word) values (" + pqxx::to_string(ip) + ", " + string_time + ", " + pqxx::to_string(local_packet.packet()) + ")";
    execute_transaction(command, false);

    if( good_modulo && first_modulo ){
      std::clog << " board " << board_address << " : " << percentage << " % time " << string_time << std::endl; fflush(stdout);
      first_modulo = false;
    }

#else

    local_packet.packet_to_physical_parameters();

    string_packet_number = int_to_string(local_packet.packet_number());
    string_board_address = local_packet.board_address();

    std::vector<Event> events = local_packet.events();

    for(vector<Event>::iterator iw=events.begin(); iw!= events.end(); ++iw){

      // count number of layers in the C-event
      n_layers = count_layers_of_event(*iw, print);
      
      // the event is selected if it has the correct number of layers
      selected = ( n_layers >=  n_layers_per_board );

      if( ! selected ) continue;

      string_n_layers = int_to_string(n_layers);

      string_time = double_to_string(iw->time("s"));

      vector<size_t> channels = iw->channels();
      string_chs = "";
      if( channels.size() ){
	for(size_t u=0; u<channels.size() - 1; u++)
	  string_chs += pqxx::to_string(channels[u]) + ", ";
	string_chs += pqxx::to_string(channels[channels.size() - 1]);
      }

      string_nchs = int_to_string(channels.size());


      // insert row in board table
      command = "INSERT INTO " + board_name + " (db_entry, packet_number, board_address, time, n_layers, nchs, " + list_of_channel_names(channels.size()) + ") " \
	"VALUES (" + pqxx::to_string(db_entry) + ", " + string_packet_number + ", " + string_board_address + ", " + string_time + ", " + string_n_layers + ", " + string_nchs + ", " + string_chs + "); ";
      execute_transaction(command, false); // insert table
      db_entry ++;
      
      percentage = (double)time_elapsed/(double)MAX_TIME*100.;
      good_modulo = ((int)(percentage) % 20 == 0);

      if( good_modulo && first_modulo ){
	std::clog << " board " << string_board_address << " : " << percentage << " % time " << string_time << " nchs " << string_nchs <<" chs " << string_chs <<  " pn " << string_packet_number << " n_layers " << string_n_layers <<  std::endl; fflush(stdout);
	first_modulo = false;
      }

    }

#endif

    if( !good_modulo && !first_modulo ){
      first_modulo = true;
    }


  }
 

  clog << " collected " << ip << " packets from board " << board_address  << endl;

  // count rows in board table
  command = "SELECT COUNT(*) FROM " + board_name ; the_db_entry = execute_nontransaction(command, false);
  std::clog << " ******************* filled table " << board_name << " with " << the_db_entry[0][0].as<int>() << " entries " << std::endl; fflush(stdout);


  exit(0);
  
  return 1;
}

string get_file_number(size_t i){
      // convert number "1" to "000001"

  size_t limit = 6;
  string numb=int_to_string(i);
  if( numb.size() > limit ){
    clog << " problem: file number " << i << " exceeds limit " << endl;
    exit(0);
  }
  size_t n_extra_zeros=6-numb.size();
  string output="";
  for(size_t i=0; i<n_extra_zeros; i++)
    output += '0';
  return output+numb;

}


string int_to_string(size_t i){
  char cc[20];
  sprintf(cc,"%d",(int)i);
  string sval(cc);
  return sval;
}

string double_to_string(double i){

  std::ostringstream out;
  out << std::setprecision(20) << i;
  return out.str();
}


  pqxx::result execute_nontransaction(string sql, bool print){
  
    /* Create a non-transactional object. */
    pqxx::nontransaction N(*c);
  
    /* Execute SQL query */
    pqxx::result R( N.exec( sql ));
  
    if( print ){
      std::clog << " executing nontransaction: " << sql << std::endl; fflush(stdout);
    
      std::clog << " rows: " << R.size() << std::endl;
      for (pqxx::result::const_iterator row = R.begin(); row != R.end();++row){
	std::clog << " ... row: " << row - R.begin() << " columns: " << row->size() << ":";
	for (pqxx::result::tuple::const_iterator field = row->begin(); field != row->end();++field){
	  std::clog << " " << field->c_str();
	}
	std::clog << std::endl;
      }
      //std::clog << " nontransaction done successfully" << endl; fflush(stdout);
    }
  
    return R;
  
  }
  
  pqxx::result execute_transaction(string sql, bool print){
 
    /* Create a transactional object. */
    pqxx::work N(*c);
  
    /* Execute SQL query */
    pqxx::result R( N.exec( sql ));
  
    N.commit();
  
    if( print ){
      std::clog << " executing transaction: " << sql << std::endl; fflush(stdout);

      std::clog << " rows: " << R.size() << std::endl;
      for (pqxx::result::const_iterator row = R.begin(); row != R.end();++row){
	std::clog << " ... row: " << row - R.begin() << " columns: " << row->size() << ":";
	for (pqxx::result::tuple::const_iterator field = row->begin(); field != row->end();++field){
	  std::clog << " " << field->c_str();
	}
	std::clog << std::endl;
      }
    
      //std::clog << " transaction done successfully" << endl; fflush(stdout);
    }
  
    return R;
  
  }


  void execute_insert(std::string binary) {

  pqxx::work txn(*c); 
  const std::string sql = "INSERT into " + board_name + " (word) VALUES ($1)";
  const std::string nme = "binary_insert" + board_address;
  c->prepare(nme, sql)("text", pqxx::prepare::treat_string);
  // database execute string 
  pqxx::result r = txn.prepared(nme)(pqxx::to_string(binary)).exec();
  txn.commit();

  return ;
}

bool check_if_table_exists( std::string table_name ){

  std::string command;
  pqxx::result R;

  command = "SELECT Distinct TABLE_NAME FROM information_schema.TABLES where TABLE_TYPE = 'BASE TABLE'";  R = execute_nontransaction(command, false);

  std::string local_name;

  for (pqxx::result::const_iterator row = R.begin(); row != R.end();++row){
    if( row->size() ){
      local_name = row->at(0).as<std::string>();
      if( local_name.compare(table_name) == 0 ){
	return true;
      }
    }
  }

  return false;

}

void read_detector(string filename){

  FILE * pFile = fopen (filename.c_str(),"r");

  int cc;
  int x1, x2, x3, x4, x5, x6, x7, x8;
  int y1, y2, y3, y4, y5, y6, y7, y8;

  while( EOF != fscanf(pFile, "%d %d %d %d %d %d %d %d %d", &cc, &x1, &y1, &x2, &y2, &x3, &y3, &x4, &y4) && EOF != fscanf(pFile, "%d %d %d %d %d %d %d %d", &x5, &y5, &x6, &y6, &x7, &y7, &x8, &y8))
 {

    expected_channels.push_back(cc);
    expected_channels_x1.push_back((size_t)x1);
    expected_channels_y1.push_back((size_t)y1);
    expected_channels_x2.push_back((size_t)x2);
    expected_channels_y2.push_back((size_t)y2);
    expected_channels_x3.push_back((size_t)x3);   
    expected_channels_y3.push_back((size_t)y3);   
    expected_channels_x4.push_back((size_t)x4);   
    expected_channels_y4.push_back((size_t)y4);   
    expected_channels_x5.push_back((size_t)x5);
    expected_channels_y5.push_back((size_t)y5);
    expected_channels_x6.push_back((size_t)x6);
    expected_channels_y6.push_back((size_t)y6);
    expected_channels_x7.push_back((size_t)x7);
    expected_channels_y7.push_back((size_t)y7);
    expected_channels_x8.push_back((size_t)x8);
    expected_channels_y8.push_back((size_t)y8);

  }

  fclose(pFile);

#if 0
  std::clog << " channel, (x1, y1), (x2, y2), ... " << std::endl;
  for( vector<size_t>::iterator j = expected_channels.begin(); j != expected_channels.end(); ++j ){
    size_t index = j - expected_channels.begin();
    std::clog << * j 
	      << ", (" << expected_channels_x1.at(index) << ", " << expected_channels_y1.at(index) 
	      << "), (" << expected_channels_x2.at(index) << ", " << expected_channels_y2.at(index) 
	      << "), (" << expected_channels_x3.at(index) << ", " << expected_channels_y3.at(index) 
	      << "), (" << expected_channels_x4.at(index) << ", " << expected_channels_y4.at(index) 
	      << "), (" << expected_channels_x5.at(index) << ", " << expected_channels_y5.at(index) 
	      << "), (" << expected_channels_x6.at(index) << ", " << expected_channels_y6.at(index) 
	      << "), (" << expected_channels_x7.at(index) << ", " << expected_channels_y7.at(index) 
	      << "), (" << expected_channels_x8.at(index) << ", " << expected_channels_y8.at(index) 
	      << ")" << std::endl;
  }
#endif

  if( expected_channels.size() != expected_channels_x1.size() ||
      expected_channels.size() != expected_channels_y1.size() ||
      expected_channels.size() != expected_channels_x2.size() ||
      expected_channels.size() != expected_channels_y2.size() ||
      expected_channels.size() != expected_channels_x3.size() ||
      expected_channels.size() != expected_channels_y3.size() ||
      expected_channels.size() != expected_channels_x4.size() ||
      expected_channels.size() != expected_channels_y4.size() ||
      expected_channels.size() != expected_channels_x5.size() ||
      expected_channels.size() != expected_channels_y5.size() ||
      expected_channels.size() != expected_channels_x6.size() ||
      expected_channels.size() != expected_channels_x7.size() ||
      expected_channels.size() != expected_channels_y7.size() ||
      expected_channels.size() != expected_channels_x8.size() ||
      expected_channels.size() != expected_channels_y8.size()
 ){
    clog << " problem: detector sizes " << expected_channels.size() << " " << expected_channels_x1.size() << " " << expected_channels_y2.size() << 
      " " << expected_channels_x3.size() << " " << expected_channels_y3.size() << 
      " " << expected_channels_x4.size() << " " << expected_channels_y4.size() <<
      " " << expected_channels_x5.size() << " " << expected_channels_y5.size() <<
      " " << expected_channels_x6.size() << " " << expected_channels_y6.size() <<
      " " << expected_channels_x7.size() << " " << expected_channels_y7.size() <<
      " " << expected_channels_x8.size() << " " << expected_channels_y8.size() <<
      endl;
    exit(0);
  }


  return;
}

size_t count_layers_of_event(Event e, bool print){

  vector<size_t> found_ys;
  vector<size_t> found_channels;
  vector<size_t> found_channels_without_offset;

  size_t offset_; // offset channel number from 0-31 to (32*N - 32*N+31), where N is the board index

  if( !strcmp(e.board_address().c_str(),"000000") ) offset_ = 0;
  else if( !strcmp(e.board_address().c_str(),"000001") ) offset_ = 1;
  else if( !strcmp(e.board_address().c_str(),"000010") ) offset_ = 2;
  else if( !strcmp(e.board_address().c_str(),"000011") ) offset_ = 3;
  else{
    std::clog << " problem: select: cannot assign offset to board address " << e.board_address() << std::endl;
    exit(0);
  }
  
  std::vector<size_t> ch = e.channels();
  size_t channel, index, local_y;

  // loop over channels in that event
  for(vector<size_t>::iterator j = ch.begin(); j != ch.end(); ++j ){
    
    channel = *j + offset_*NUM_CHANNELS;
    
    // get index of channel
    index = std::find(expected_channels.begin(), expected_channels.end(),channel) - expected_channels.begin();
    
    
    // check y coordinate of the channel
    
    local_y = expected_channels_y1[index];
    
    if( std::find(found_ys.begin(), found_ys.end(), local_y) == found_ys.end() ){
      found_channels.push_back(channel);
      found_channels_without_offset.push_back(channel - offset_*NUM_CHANNELS);
      found_ys.push_back(local_y);
    }
    
  }
  


  if( print ){
    std::clog << " found " << found_channels.size() << " channels, original channel and ys: " ;
    for(vector<size_t>::iterator j = found_channels.begin(); j != found_channels.end(); ++j ){
      std::clog << "(" << *j << ", " << found_channels_without_offset[j - found_channels.begin()]  << ", " << found_ys[j - found_channels.begin()] << ") ";
    }
    std::clog << " " << std::endl;
  }


  return found_ys.size();

}


void fill_channel_names(){

  list_of_channel_names_and_types = "";
  for(size_t i=0; i<MAX_CHANNELS_NUMBER-1; i++){
    channel_names[i] = "ch" + int_to_string(i);
    list_of_channel_names_and_types += channel_names[i] + " int,";
  }

  channel_names[MAX_CHANNELS_NUMBER - 1] = "ch" + int_to_string(MAX_CHANNELS_NUMBER - 1);
  list_of_channel_names_and_types += channel_names[MAX_CHANNELS_NUMBER - 1] + " int";

}


string list_of_channel_names(size_t n){

  string   list = "";
  for(size_t i=0; i<n-1; i++){
    list += channel_names[i] + ", ";
  }

  list += channel_names[n - 1];
  return list;

}

int getMilliCount(){
  timeb tb;
  ftime(&tb);
  int nCount = tb.millitm + (tb.time & 0xfffff) * 1000;
  return nCount;
}

int getMilliSpan(int nTimeStart){
  int nSpan = getMilliCount() - nTimeStart;
  if(nSpan < 0)
    nSpan += 0x100000 * 1000;
  return nSpan;
}
